AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'develop'

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: AllAtOnce
      Role: !Ref CodeDeployRole
    Layers:
      - !Ref DependencyLayer
    Environment:
      Variables:
        NODE_ENV: !Ref Stage
    Runtime: nodejs14.x
    CodeUri: app/dist

Resources:
  MainApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: "'*'"
      Auth:
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            # Identity:
            #   Header: token
            # AuthType: 'COGNITO_USER_POOLS'
        DefaultAuthorizer: MyCognitoAuthorizer

  HelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-HelloWorld'
      CodeUri: app/dist
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref MainApi

  GetAuthToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-auth'
      CodeUri: app/dist
      Handler: handlers/verify-auth-code.handler
      Environment:
        Variables:
          CognitoClientIDPath: !Sub /cognito/${ProjectId}${Stage}/client/id
          CognitoClientSecretPath: !Sub /cognito/${ProjectId}${Stage}/client/secret
          CognitoUrl: !Sub bot6-0-${Stage}.auth.${AWS::Region}.amazoncognito.com
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Policies: !Sub SSM_ACCESS_${ProjectId}${Stage}
      Timeout: 30
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /token
            RequestParameters:
              - method.request.querystring.code:
                  Required: true
                  Caching: false
            Auth:
              Authorizer: NONE
            Method: get
            RestApiId: !Ref MainApi

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'CodeStar-${ProjectId}-UserPool${Stage}'
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: OPTIONAL
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
        - AttributeDataType: String
          Name: userID
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub 'CodeStar-${ProjectId}-CognitoClient${Stage}'
      GenerateSecret: true
      AccessTokenValidity: 12
      RefreshTokenValidity: 30
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://google.com
      DefaultRedirectURI: https://google.com

  CognitoUserPoolClientIDParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /cognito/${ProjectId}${Stage}/client/id
      Type: String
      Value: !Ref CognitoUserPool

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub bot6-0-${Stage}
      UserPoolId: !Ref CognitoUserPool

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

  SSMParameterManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub SSM_ACCESS_${ProjectId}${Stage}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:AddTagsToResource
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cognito/${ProjectId}${Stage}/client/*

  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'CodeStar-${ProjectId}-Depenedencies${Stage}'
      Description: Root dependencies
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete
